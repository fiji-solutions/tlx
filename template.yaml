AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  tlx

  Sample SAM Template for tlx

Globals:
  Function:
    Runtime: python3.9
    Timeout: 120
    MemorySize: 128
    Environment:
      Variables:
        # Solindex coins individually
        table: !Ref DynamoDBTable
        # Solindex indexes individually
        table2: !Ref DynamoDBTable2
        # Coingecko data
        table3: !Ref DynamoDBTable3
        # Coingecko all coins
        table4: !Ref DynamoDBTable4
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Parameters:
  CognitoCustomDomain:
    Type: String
    Description: Cognito Custom Domain

Resources:
  HelloWorldApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: CompositeKey
          AttributeType: S
        - AttributeName: IndexName
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: CompositeKey
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: IndexName-Timestamp-Index
          KeySchema:
            - AttributeName: IndexName
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  DynamoDBTable2:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: CompositeKey
          AttributeType: S
        - AttributeName: IndexName
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: CompositeKey
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: IndexName-Timestamp-Index
          KeySchema:
            - AttributeName: IndexName
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  DynamoDBTable3:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: CompositeKey
          AttributeType: S
        - AttributeName: IndexName
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: CompositeKey
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: IndexName-Timestamp-Index
          KeySchema:
            - AttributeName: IndexName
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  DynamoDBTable4:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 120
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref HelloWorldApi
            Path: /hello
            Method: get

  TlxExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tlx_export/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 120
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref HelloWorldApi
            Path: /tlx-export
            Method: get

  TorosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: toros/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 120
      Architectures:
        - x86_64
      Events:
        Toros:
          Type: Api
          Properties:
            RestApiId: !Ref HelloWorldApi
            Path: /toros
            Method: get

  TorosExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: toros_export/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 120
      Architectures:
        - x86_64
      Events:
        Toros:
          Type: Api
          Properties:
            RestApiId: !Ref HelloWorldApi
            Path: /toros-export
            Method: get

  SolIndexCronFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: solindex_cron/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 120
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable2
      Events:
        SolIndexSchedule:
          Type: Schedule
          Properties:
            Schedule: "cron(0 * * * ? *)"

  SolIndexFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: solindex/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 120
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        Toros:
          Type: Api
          Properties:
            RestApiId: !Ref HelloWorldApi
            Path: /solindex
            Method: get

  # ----COGNITO START----
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: true
          Mutable: true
          Name: fullName
          Required: false
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: false
          Name: fullName
          Required: false
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
        - https://tlx.fijisolutions.net/login
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${CognitoCustomDomain}
      UserPoolId: !Ref UserPool
  UserPoolGroupAdmin:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      Precedence: 100
      UserPoolId: !Ref UserPool
  UserPoolGroupClient:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: client
      Precedence: 200
      UserPoolId: !Ref UserPool
  # ----COGNITO START----

#  CoingeckoSolFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: coingecko_sol/
#      Handler: app.lambda_handler
#      Runtime: python3.9
#      Timeout: 120
#      Architectures:
#        - x86_64
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref DynamoDBTable3
#      Events:
#        Toros:
#          Type: Api
#          Properties:
#            RestApiId: !Ref HelloWorldApi
#            Path: /coingecko-sol
#            Method: get
#
#  CoingeckoSolAllFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: coingecko_sol_all/
#      Handler: app.lambda_handler
#      Runtime: python3.9
#      Timeout: 120
#      Architectures:
#        - x86_64
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref DynamoDBTable4
#      Events:
#        Toros:
#          Type: Api
#          Properties:
#            RestApiId: !Ref HelloWorldApi
#            Path: /coingecko-sol-all
#            Method: get

#  HelloWorldApiStage:
#    Type: AWS::ApiGateway::Stage
#    Properties:
#      RestApiId: !Ref HelloWorldApi
#      StageName: Prod
#      CacheClusterEnabled: true
#      CacheClusterSize: '0.5'  # Adjust as needed (0.5, 1.6, 6.1, etc.)
#      MethodSettings:
#        - ResourcePath: "/*"
#          HttpMethod: "*"
#          CachingEnabled: true
#          CacheTtlInSeconds: 3600  # 1 hour
#          CacheDataEncrypted: true
#          DataTraceEnabled: true
#          ThrottlingBurstLimit: 1000
#          ThrottlingRateLimit: 500

Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${HelloWorldApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  TorosFunction:
    Description: "Toros Lambda Function ARN"
    Value: !GetAtt TorosFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
